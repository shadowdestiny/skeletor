{"version":3,"file":"ngx-skeletor-loader.js","sources":["../../../projects/ngx-skeletor-loader/src/lib/ngx-skeletor-loader-config.types.ts","../../../projects/ngx-skeletor-loader/src/lib/ngx-skeletor-loader.component.ts","../../../projects/ngx-skeletor-loader/src/lib/ngx-skeletor-loader.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport type NgxSkeletonLoaderConfigTheme = {\n  // This is required since ngStyle is using `any` as well\n  // More details in https://angular.io/api/common/NgStyle\n  // tslint:disable-next-line: no-any\n  [k: string]: any;\n} | null;\n\nexport interface NgxSkeletonLoaderConfig {\n  appearance: 'circle' | 'line' | '';\n  animation: 'progress' | 'progress-dark' | 'pulse' | 'false' | false;\n  theme: NgxSkeletonLoaderConfigTheme;\n  loadingText: string;\n  count: number;\n  ariaLabel: string;\n}\n\nexport const NGX_SKELETON_LOADER_CONFIG = new InjectionToken<NgxSkeletonLoaderConfig>('ngx-skeletor-loader.config');\n","import {\n  Component,\n  OnInit,\n  Input,\n  isDevMode,\n  OnDestroy,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  OnChanges,\n  SimpleChanges,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport { start, end } from 'perf-marks/marks';\nimport {\n  NgxSkeletonLoaderConfig,\n  NgxSkeletonLoaderConfigTheme,\n  NGX_SKELETON_LOADER_CONFIG,\n} from './ngx-skeletor-loader-config.types';\n\n@Component({\n  selector: 'ngx-skeletor-loader',\n  templateUrl: './ngx-skeletor-loader.html',\n  styleUrls: ['./ngx-skeletor-loader.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgxSkeletonLoaderComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges {\n  // tslint:disable-next-line: variable-name\n  static ngAcceptInputType_count: number | string;\n  // tslint:disable-next-line: variable-name\n  static ngAcceptInputType_animation: boolean | string;\n\n  @Input()\n  count: NgxSkeletonLoaderConfig['count'];\n\n  @Input()\n  loadingText: NgxSkeletonLoaderConfig['loadingText'];\n\n  @Input()\n  appearance: NgxSkeletonLoaderConfig['appearance'];\n\n  @Input()\n  animation: NgxSkeletonLoaderConfig['animation'];\n\n  @Input()\n  ariaLabel: NgxSkeletonLoaderConfig['ariaLabel'];\n\n  @Input()\n  theme: NgxSkeletonLoaderConfigTheme;\n\n  // tslint:disable-next-line: no-any\n  items: Array<any>;\n\n  constructor(@Inject(NGX_SKELETON_LOADER_CONFIG) @Optional() config?: NgxSkeletonLoaderConfig) {\n    const {\n      appearance = 'line',\n      animation = 'progress',\n      theme = null,\n      loadingText = 'Loading...',\n      count = 1,\n      ariaLabel = 'loading',\n    } = config || {};\n\n    this.appearance = appearance;\n    this.animation = animation;\n    this.theme = theme;\n    this.loadingText = loadingText;\n    this.count = count;\n    this.items = [];\n    this.ariaLabel = ariaLabel;\n  }\n\n  ngOnInit() {\n    start('NgxSkeletonLoader:Rendered');\n    start('NgxSkeletonLoader:Loaded');\n\n    this.validateInputValues();\n  }\n\n  private validateInputValues() {\n    // Checking if it's receiving a numeric value (string having ONLY numbers or if it's a number)\n    if (!/^\\d+$/.test(`${this.count}`)) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(\n          `\\`NgxSkeletonLoaderComponent\\` need to receive 'count' a numeric value. Forcing default to \"1\".`,\n        );\n      }\n      this.count = 1;\n    }\n    this.items.length = this.count;\n\n    const allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];\n    if (allowedAnimations.indexOf(String(this.animation)) === -1) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(\n          `\\`NgxSkeletonLoaderComponent\\` need to receive 'animation' as: ${allowedAnimations.join(\n            ', ',\n          )}. Forcing default to \"progress\".`,\n        );\n      }\n      this.animation = 'progress';\n    }\n\n    if (['circle', 'line', ''].indexOf(String(this.appearance)) === -1) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(\n          `\\`NgxSkeletonLoaderComponent\\` need to receive 'appearance' as: circle or line or empty string. Forcing default to \"''\".`,\n        );\n      }\n      this.appearance = '';\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Avoiding multiple calls for the same input in case there's no changes in the fields\n    // Checking if the fields that require validation are available and if they were changed\n    // In case were not changed, we stop the function. Otherwise, `validateInputValues` will be called.\n    if (\n      ['count', 'animation', 'appearance'].find(\n        key =>\n          changes[key] && (changes[key].isFirstChange() || changes[key].previousValue === changes[key].currentValue),\n      )\n    ) {\n      return;\n    }\n\n    this.validateInputValues();\n  }\n\n  ngAfterViewInit() {\n    end('NgxSkeletonLoader:Rendered');\n  }\n\n  ngOnDestroy() {\n    end('NgxSkeletonLoader:Loaded');\n  }\n}\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxSkeletonLoaderComponent } from './ngx-skeletor-loader.component';\nimport { NgxSkeletonLoaderConfig, NGX_SKELETON_LOADER_CONFIG } from './ngx-skeletor-loader-config.types';\n\n@NgModule({\n  declarations: [NgxSkeletonLoaderComponent],\n  imports: [CommonModule],\n  exports: [NgxSkeletonLoaderComponent],\n})\nexport class NgxSkeletonLoaderModule {\n  constructor(@Optional() @SkipSelf() parentModule?: NgxSkeletonLoaderModule) {\n    if (parentModule) {\n      throw new Error(\n        `\\`NgxSkeletonLoaderModule\\` is already loaded and it might cause issues. To avoid that, import the module only once in your app.`,\n      );\n    }\n  }\n\n  static forRoot(config?: Partial<NgxSkeletonLoaderConfig>): ModuleWithProviders<NgxSkeletonLoaderModule> {\n    return {\n      ngModule: NgxSkeletonLoaderModule,\n      providers: [{ provide: NGX_SKELETON_LOADER_CONFIG, useValue: config }],\n    };\n  }\n}\n"]}